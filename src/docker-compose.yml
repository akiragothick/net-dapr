version: '3.4'

services:
  test.dapr.client:
    image: ${DOCKER_REGISTRY-}testdaprclient
    build:
      context: .
      dockerfile: Test.Dapr.Client/Dockerfile
    ports:
      - "7001:80"
      #- "3501:3500"
    #environment:
    #  - DAPR_HTTP_PORT=3500
    depends_on:
      - placement
    networks:
      - alltogether

  myfrontend-dapr:
    image: "daprio/daprd:latest"
    #image: "daprio/daprd:edge"
    command: [ "./daprd", 
        "-app-id", "myfrontend", 
        "-app-port", "80", # puerto de salida de la app
        "-dapr-http-port", "3500", # puerto de escucha de dapr
        "-components-path", "/components",
        "-config", "/configuration/config.yaml",
        "-placement-host-address", "placement:50006"] # puerto de placement
    volumes:
      - ./dapr/components/:/components
      - ./dapr/configuration/:/configuration
    depends_on:
      - test.dapr.client
    network_mode: "service:test.dapr.client"
    restart: on-failure


  test.dapr.api:
    image: ${DOCKER_REGISTRY-}testdaprapi
    build:
      context: .
      dockerfile: Test.Dapr.Api/Dockerfile
    #ports:
    #  - "7002:80"
      #- "3500:3500"
    #ports:
    #   - "80"
    #   - "3500:3500"
    #deploy:
    #  replicas: 2
    #environment:
    #  - DAPR_HTTP_PORT=3500
    depends_on:
      - placement
    networks:
      - alltogether
  mybackend-dapr:
    image: "daprio/daprd:latest"
    command: [ "./daprd", 
        "-app-id", "mybackend", 
        "-app-port", "80",
        "-dapr-http-port", "3500",
        "-components-path", "/components",
        "-config", "/configuration/config.yaml",
        "-placement-host-address", "placement:50006"]
    volumes:
      - ./dapr/components/:/components
      - ./dapr/configuration/:/configuration
    depends_on:
      - test.dapr.api
    network_mode: "service:test.dapr.api"
    restart: on-failure

################
  #test.dapr.api.clone:
  #  image: ${DOCKER_REGISTRY-}testdaprapi-clone
  #  build:
  #    context: .
  #    dockerfile: Test.Dapr.Api/Dockerfile
  #  ports:
  #    - "7003:80"
  #  depends_on:
  #    - placement
  #  networks:
  #    - alltogether
  #mybackend-dapr.clone:
  #  image: "daprio/daprd:latest"
  #  command: [ "./daprd", 
  #      "-app-id", "mybackend", 
  #      "-app-port", "80",
  #      "-dapr-http-port", "3500",
  #      "-components-path", "/components",
  #      "-config", "/configuration/config.yaml",
  #      "-placement-host-address", "placement:50006"]
  #  volumes:
  #    - ./dapr/components/:/components
  #    - ./dapr/configuration/:/configuration
  #  depends_on:
  #    - test.dapr.api.clone
  #  network_mode: "service:test.dapr.api.clone"
  #  restart: on-failure
################

# Discovery Server
  #consul:
  #  image: "consul"
  #  ports:      
  #    - 8500:8500
  #  environment:
  #    - CONSUL_BIND_INTERFACE=eth0
  #  networks:
  #    - alltogether

# Observavility
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:      
      - 9413:9411
    networks:
      - alltogether

  #jaeger:
  #  image: jaegertracing/all-in-one:latest
  #  ports:
  #    - "16686:16686"
  #    - "9412:9412"
  #  environment:
  #    - COLLECTOR_OTLP_ENABLED=true
  #    - COLLECTOR_ZIPKIN_HOST_PORT=9412
  #    - LOG_LEVEL=debug
  #  networks:
  #    - alltogether

  prometheus:
    image: prom/prometheus:latest
    ports:      
      - 8080:8080
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.listen-address=:8080"
    volumes:
      - ./dapr/tmp/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - alltogether
  
  grafana:
    image: grafana/grafana:latest
    ports:      
      - 3000:3000
    #volumes:
    #  - grafana-data:/var/lib/grafana
    #  - ./dapr/grafana/provisioning/:/etc/grafana/provisioning/
    #env_file:
    #  - ./dapr/grafana/config.monitoring
    networks:
      - alltogether
    restart: always

  #grafana:
  #  image: grafana/grafana
  #  user: "472"
  #  depends_on:
  #    - prometheus
  #  ports:
  #    - 3000:3000
  #  volumes:
  #    - grafana_data:/var/lib/grafana
  #    - ./grafana/provisioning/:/etc/grafana/provisioning/
  #  env_file:
  #    - ./grafana/config.monitoring
  #  networks:
  #    - back-tier
  #    - front-tier
  #  restart: always

# servicio dapr que se encarga del descubrimiento de los contenedores
  placement:
    image: "daprio/dapr"
    command: ["./placement", "-port", "50006", "-log-level", "debug"]
    ports:
      - "50006:50006"
    networks:
      - alltogether
networks:
    alltogether: